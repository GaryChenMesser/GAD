.. _introduction:

**********************************
Introduction
**********************************

SADIT is a byproduct of research project **A Coordinated Approach to
Cyber-Situation Awarness Based on Traffic Anomaly Detection**.  It is the
acronym of **S**\ ystematic **A**\ nomaly **D**\ etection of **I**\ nternet
**T**\ raffic.  The motivation of SADIT is to make the comparison and the
validation of internet anomaly deteciton algorithmes super easy.  It provides
a collection of Internet Anomaly Detection algorithms proposed by several
researchers. Now it contains:

    1. Stochastic Anomaly Detector using Large Deviation Theory
    2. Deterministic Temporal Anomaly Detector using Support Vector Machine
    3. Deterministic Flow by Flow Detector using Support Vector Machine
    4. Anomaly Detection Techniques using ART theory

SADIT is not limited to the four algorithms listed above, its utimate goal is to
become a standard collection of a variety of internet anomaly detection
algorithms.

It also provides an easy-to-use tool to generate labeled flow records, which are
helpful in validatation and comparison of methods.

If you are a researcher interested in Internet Anomaly Detection, we strongly
encourage you to implement your algorithms following the APIs and data format of
SADIT so that you can easily compare your methods with exisiting algorithms in
SADIT. Your help will be highly appreciated if you can contribute your own
algorithm to the algorithm libray of SADIT. Feel free to contact me if you have
any question.



What's New
==================================
the version 1.0 is a result of big refactor of version 0.0. The refactor makes the code more
scalable and less buggy.
    - **Paradigm of Object-oriented programming**: The **Configure** module and **Detector** module have been rewritten under
      object-oriented paradigm. In version 0.0, all modules depends on the global
      settings file setting.py, which make the code more vulunerable to bugs. In this verison only 
      few scripts depend on settings.py. Classes are widely used to reduce the need to
      pass parameters around. In case that parameters passing is required, well-defined structures are used.
    - **Experiment**: A new folder ROOT/Experiment appears to contain different
      experiments. You can write your own scripts of Experiment and put them in
      this folder.
    - **Better Sensitivity Anaysis**: In the version 0.0, sensitivity anaysis is 
      done by change the global settings.py file and rerun the simulation. Since 
      settings.py is a typical python module,changing it during the run is really not 
      a good idea. In this version, special Experiment is designed to support
      sensitivity analysis.

Structure
================================
**SADIT** consists of  two parts. The first part is a collection of anomalies
detection algorithms. The second part is labeled flow record generator. The
follow sections will describe the two parts accordingly.

.. It also implement one algorithm proposed by `Jing Conan Wang <http://people.bu.edu/wangjing/>`_, Ronald Lockle Taylor and `Yannis Paschalidis <http://ionia.bu.edu/>`_ .Look at our `poster <http://people.bu.edu/wangjing/pdf/data_exfiltration-back.pdf>`_ for more information of our work

.. **configure**
    configure the simulator based on the description of anomaly in settings.py.
    In current version, it is **DOT file** needed by *fs*-simulator.
.. **simulator**
    Generate the traffic through simulation. In current version, it is a revised
    version of `fs-simulator <http://cs.colgate.edu/~jsommers/#code>`_. It will read
    the **DOT file** generated by **configure** and generate a network flow
    file with Cisco Netflow version 5 binary format.
.. **detector**
..
    this module will read the network flow file generate by **simulator** and
    try to detect anomaly accordingly. In current version, the detector is based
    on one of our `paper <http://people.bu.edu/wangjing/html/AnomalyDetection.html>`_. Look at our `poster <http://people.bu.edu/wangjing/pdf/data_exfiltration-back.pdf>`_ for more information of our work.



