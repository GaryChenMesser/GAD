.. SADIT documentation master file, created by
   sphinx-quickstart on Sun Mar 25 18:07:56 2012.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

=================================
Welcome to SADIT's documentation! 
=================================

Introduction
================================
Goal
----------------------------------
A challenging problem in the research of anomaly detection is that there is
little real traffic data with labelled malicious behavior. So most researchers
resort simulation to test the algorithm , thus a good simulation of malicious
attack becomes relevant.  The second problem is that different researchers use
different benchmarks, which makes comparison very hard. The thrid problem is
that most of the test codes are throwed after paper is published. At the same
time, programmers in industry need to start from scratch when implementing a
product using those algorithms.

To address those problems, we developed **SADIT**, which is acronym for **S**\
tatistical **A**\ nomaly **D**\ etection **I**\ ntegrated **T**\ ools.

**SADIT** aims to :

    1. provide research community an easy-to-use tool to validate and test
       statistical anomaly detecting method in simulated environment.
    2. provide a set of benchmarks for comparison. 
    3. make the transition from test code to production code effortless.

In the current developing stage, we focus on simulation. **SADIT** uses
fs(flow-max) nework simulator, an efficient & light-weight network simulator
developed by UW Madison, to simulate the network flow traffic.


SADIT is a byproduct of research project **A Coordinated Approach to
Cyber-Situation Awarness Based on Traffic Anomaly Detection**.

Cyber espionage poses a substantial threat to both corporate and government
entities. Attacks can be precise and targeted efforts, such as extracting
credit card transaction records from a central data server. Attacks can also
be seemingly benign, such as randomly crawling through a serverâ€™s contents. It
is thought that these attacks are trials to see if access to critical
information can be gained. Data exfiltration varies over a broad spectrum. On
one end is the case of a user, granted server access through legitimate means,
exporting sensitive information to an external entity. On the other end is the
case of an external user, through access inadvertently granted by a typical
user, downloading random pieces of information.

Some techniques to detect attacks are based on analyzing the information has
been accessed. However, it is not effective in many cases. One case is that
the attackers are authenticated users themselves or authoenticated users
controlled by attackers. Another case is that, the web server owner resort
third party software to detect anomaly and don't want to disclose the
information to third-party software.

For some cases, a better approach would be to use statistical models to
analyze the patterns of traffic to the webserver. The advatage is that this
method is more general and have the ability to detect unknown anomalies.

**SADIT** provides a framework to generate the traffic data with known
anomalies through simulation. It also implement one algorithm proposed by
`Jing Conan Wang <http://people.bu.edu/wangjing/>`_, Ronald Lockle Taylor and
`Yannis Paschalidis <http://ionia.bu.edu/>`_ .Look at our `poster
<http://people.bu.edu/wangjing/pdf/data_exfiltration-back.pdf>`_ for more
information of our work

Structure
------------------------------
..
.. figure:: SADIT-structure.png
    :scale: 50 %
    :alt: structure of SADIT
    :align: center
    Structure of **SADIT**

The figure is the structure of **SADIT**. 

**settings.py**
    General setting file. 
**Configure**
    configure the simulator based on the description of anomaly in
    settings.py.  In current version, it will generate aa **DOT file** for
    *fs*-simulator.
**Simulator**
    Generate the traffic through simulation. In current version, it is a
    revised version of `fs-simulator
    <http://cs.colgate.edu/~jsommers/#code>`_. It will read the **DOT file**
    generated by **configure** and generate a network flow file with Cisco
    Netflow version 5 binary format.
**Detector**
    this module will read the network flow file generate by **simulator** and
    try to detect anomaly accordingly. In current version, the detector is
    based on one of our `paper
    <http://people.bu.edu/wangjing/html/AnomalyDetection.html>`_. Look at our
    `poster <http://people.bu.edu/wangjing/pdf/data_exfiltration-back.pdf>`_
    for more information of our work.

Use Case
----------------------------------
SADIT can run on two modes:
    1. **Detect Mode**: In this mode, it will read some flow data and try to
           detect whether there is anomaly or not. Now SADIT detector support
           1. fs
    2. **Integrated Mode**: In this mode, SADIT will generate labeled anomaous data
           data.according to description in setting.py. And detector will be
           used to check the data.
           
type ::
    
    ./run.py

then you can get ::

    usage: run.py [-h] [-e EXPERIMENT] [-i INTERPRETER] [-d DETECT] [-m METHOD]
              [-dh DATA_HANDLER] [-fo FEATURE_OPTION] [-ef EXPORT_FLOWS]
              [-et ENTROPY_THRESHOLD]

    sadit

    optional arguments:
      -h, --help            show this help message and exit
      -e EXPERIMENT, --experiment EXPERIMENT
                            specify the experiment name you want to execute.
                            Experiments availiable are: ['ROC', 'DetectArgSearch',
                            'MultiSrvExperiment', 'Experiment', 'MarkovSens',
                            'Eval', 'Sens', 'MarkovExperiment', 'test']. An
                            integrated experiment will run fs-simulator first and
                            use detector to detect the result.
      -i INTERPRETER, --interpreter INTERPRETER
                            --specify the interperter you want to use, now support
                            [cpython], and [pypy](only for detector)
      -d DETECT, --detect DETECT
                            --detect [filename] will simply detect the flow file,
                            simulator will not run in this case, detector will
                            still use the configuration in the settings.py
      -m METHOD, --method METHOD
                            --method [method] will specify the method to use.
                            Avaliable options are: ['svm_fbf':
                            SVMFlowByFlowDetector SVM Flow By Flow Anomaly
                            Detector Method | 'mf': ModelFreeAnoDetector | 'mfmb':
                            FBAnoDetector model free and model based together |
                            'svm_temp': SVMTemporalDetector SVM Temporal
                            Difference Detector. Proposed by R.L Taylor.
                            Implemented by J. C. Wang <wangjing@bu.ed> | 'mb':
                            ModelBaseAnoDetector]
      -dh DATA_HANDLER, --data_handler DATA_HANDLER
                            --specify the data handler you want to use, the
                            availiable option are: ['fs_deprec': DataFile from fs
                            output flow file to feature, this class is
                            *depreciated* | 'fs': HardDiskFileHandler Data is
                            stored as Hard Disk File | 'xflow':
                            HardDiskFileHandler_xflow | 'SperottoIPOM2009':
                            SQLDataFileHandler_SperottoIPOM2009 "Data File wrapper
                            for SperottoIPOM2009 format. it is store in mysql
                            server, visit http://traces.simpleweb.org/traces/netfl
                            ow/netflow2/dataset_description.txt for more
                            information | 'pcap2netflow':
                            HardDiskFileHandler_pcap2netflow]
      -fo FEATURE_OPTION, --feature_option FEATURE_OPTION
                            specify the feature option. feature option is a
                            dictionary describing the quantization level for each
                            feature. You need at least specify 'cluster' and
                            'dist_to_center'. Note that, the value of 'cluster' is
                            the cluster number. The avaliability of other features
                            depend on the data handler.
      -ef EXPORT_FLOWS, --export_flows EXPORT_FLOWS
                            specify the file name of exported abnormal flows.
                            Default is not export
      -et ENTROPY_THRESHOLD, --entropy_threshold ENTROPY_THRESHOLD
                            the threshold for entropy,


Configure
----------------------------------

Simulator
----------------------------------

Detector
----------------------------------

Download 
=====================================
You can download sadit from `here <https://bitbucket.org/hbhzwj/sadit/get/2182e36f40d5.zip>`_.
or you can user mercurial to get a complete copy with revision history ::

    hg clone https://bitbucket.org/hbhzwj/sadit


Installation
=====================================
SADIT can be installed in Linux, Mac OS X and Windows(through cygwin).

Debain (Ubuntu, Mint, etc)
-------------------------------------
If you are using debain based system like Ubuntu, Mint, you are lucky. There
is an installation script prepared for debain based system, just type ::
    
    sh debain.sh

Mac OS X
-------------------------------------
For mac user, just type  ::
    
    sudo python setup-dep.py

the **ipaddr**, **networkx**, **pydot**, **pyparsing** and **py-radix** will
be automatically downloaded and installed.  If you just want to use the
**Detector** part, that is already enough If you want to use **Configure** and
**Simulator** part, then you also need to install numpy and matplotlib. Please
go to http://www.scipy.org/NumPy and
http://matplotlib.sourceforge.net/faq/installing_faq.html for installation
instruction.

Windows
-------------------------------------
SADIT can be installed on windows machine with the help of cgywin. There is a
detailed step by step installation tutorial, click
https://docs.google.com/open?id=0B0EiFkYoJWwbaloybWV5V1BuQVk

Manually
-------------------------------------
If the automatical methods fail, you can try to install manually.  **SADIT**
has been tested on python2.7.2.  SADIT depends on all softwares that
fs-simulate depends on:

    - ipaddr (2.1.1)  `Get <http://ipaddr-py.googlecode.com/files/ipaddr-2.1.1.tar.gz>`_
    - networkx (1.0) `Get <http://networkx.lanl.gov/download/networkx/networkx-1.0.1.tar.gz>`_
    - pydot (1.0.2) `Get <http://pydot.googlecode.com/files/pydot-1.0.2.tar.gz>`_
    - pyparsing (1.5.2) `Get <http://downloads.sourceforge.net/project/pyparsing/pyparsing/pyparsing-1.5.2/pyparsing-1.5.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fpyparsing%2Ffiles%2Fpyparsing%2Fpyparsing-1.5.2%2F&ts=1332828745&use_mirror=softlayer>`_
    - py-radix (0.5) `Get <http://py-radix.googlecode.com/files/py-radix-0.5.tar.gz>`_

besides: it requires:
    - numpy `Get <http://numpy.scipy.org/>`_
    - matplotlib `Get <http://matplotlib.sourceforge.net/>`_
    - profilehooks `Get <http://mg.pov.lt/profilehooks/>`_

if you are in debain based system. you can simple use ::

    sudo apt-get install python-dev
    sudo apt-get install python-numpy
    sudo apt-get install python-matplotlib

in other system, refer to corresponding website for installation
of **numpy** and **matplotlib**


Table of Content
-----------------------------------

.. toctree::
    :maxdepth: 2
    :numbered:

..
    introduction
    download
    customize

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
* :ref:`glossary`
